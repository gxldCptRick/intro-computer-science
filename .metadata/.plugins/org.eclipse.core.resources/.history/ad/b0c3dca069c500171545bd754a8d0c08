package models;

import java.util.Random;

public class DiceCup {

	private static Random randomNumberGenerator = new Random();
	private static Die[] diceInCup;
	private static int greenDice = 6, yellowDice = 4, redDice = 3;
	private static int amountOfDice = greenDice + yellowDice + redDice;

	public static void initializeDice(int greenDice, int yellowDice, int redDice) {
	
		DiceCup.greenDice = greenDice;
		
		DiceCup.yellowDice = yellowDice;
		
		DiceCup.redDice = redDice;
	
		DiceCup.amountOfDice = greenDice + yellowDice + redDice;
		
		DiceCup.initializeCup();
		
	}
	
	public static int getDiceLeftInCup() {
		int diceLeftInCup = 0;
		
		for(Die die : diceInCup) {
			if(!die.getUseState()) {
				diceLeftInCup++;
			}
		}
		
		return diceLeftInCup;
	
	} 
	
	public static Die getDiceFromCup() {
		
		Die dieDrawn;
		
		if( diceInCup  == null) {
		
			initializeCup();
		
		}
		
		int positionInCup  = randomNumberGenerator.nextInt(diceInCup.length);
		
		dieDrawn = diceInCup[positionInCup];
		
		boolean inUse = dieDrawn.getUseState();
		
		if(inUse) {
			
			getDiceFromCup();
		
		}
		else {
			
			dieDrawn.setUse();
			
			System.out.println("Setting " + dieDrawn.getDifficutly() + " to " dieDrawn.getUseState());
		
		}
		
		return dieDrawn;

	}
	
	private static void initializeCup() {
		diceInCup = new Die[amountOfDice];
		
		int middleLimit = greenDice + yellowDice;
		
		for(int i = 0; i < diceInCup.length; i++) {
			
			if(i < greenDice) {
			
				diceInCup[i] = new Die(Die.DieType.GREEN);
			
			}else if(i < middleLimit){
			
				diceInCup[i] = new Die(Die.DieType.YELLOW);
			
			}
			else {
			
				diceInCup[i] = new Die(Die.DieType.RED);
			
			}
		}
	}

}
